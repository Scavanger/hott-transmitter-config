<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!--
	HoTT Transmitter Config
	Copyright (C) 2013  Oliver Treichel
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<@htmlsafe>
<#macro switch sw={"assignment":"Unassigned"}><#if sw.assignment == "Unassigned">---<#else>${sw.assignment}<#if sw.direction == 2> normal<#else><#if sw.direction=1> invers</#if></#if></#if></#macro>
<#macro curve title points>
			<tr>
				<th align="right">${title}</th>
				<td>
					<table>
						<tr>
							<th>Punkt</th>
							<th>aktiv</th>
							<th>Eingang</th>
							<th>Ausgang</th>
						</tr>
<#list points as point>
						<tr>
							<td>${point.number?number+1}</td>
							<td>${point.enabled?string("ja","nein")}</td>
<#if point.enabled>
							<td>${point.position}</td>
							<td>${point.value}</td>
<#else>
							<td colspan="2">&nbsp;</td>
</#if>
						</tr>
</#list>
					</table>
				</td>
			</tr>
</#macro>
	<head>
		<title>${model.vendor} ${model.transmitterType} - ${model.modelName}</title>
		<style type="text/css" media="print">
			@page { size: a4; }
		</style>		
	</head>
	<body>
		<h1>Grundeinstellungen Modell</h1>
		<table>
			<tr>
				<th align="right">Hersteller</th>
				<td colspan="3">${model.vendor}</td>
			</tr>
			<tr>
				<th align="right">Sendertyp</th>
				<td colspan="3">${model.transmitterType}</td>
			</tr>
			<tr>
				<th align="right">Sender ID</th>
				<td colspan="3">${hex(model.transmitterId?c)}</td>
			</tr>
			<tr>
				<th align="right">Firmware Version</th>
				<td colspan="3">${model.appVersion}</td>
			</tr>
			<tr>
				<th align="right">Datei Version</th>
				<td colspan="3">${model.memoryVersion}</td>
			</tr>
			<tr>
				<th align="right">Modelltyp</th>
				<td colspan="3">${model.modelType}</td>
			</tr>
			<tr>
				<th align="right">Modellspeicher</th>
				<td colspan="3">${model.modelNumber}</td>
			</tr>
			<tr>
				<th align="right">Modellname</th>
				<td colspan="3">${model.modelName}</td>
			</tr>
			<tr>
				<th align="right">Steueranordnung</th>
				<td colspan="3">${model.stickMode}</td>
			</tr>
			<tr>
				<th align="right">Modul</th>
				<td colspan="3">${model.module.type}</td>
			</tr>
<#if model.module.type.name() == "HoTT">
<#list model.receiver as receiver>
			<tr>
				<th>Empfänger ${receiver.number?number+1}</th>
<#if receiver.bound>
				<td><i>gebunden:</i> ${receiver.bound?string("ja","nein")}</td>
				<td><i>Telemetrie:</i> ${receiver.telemetry?string("ja","nein")}</td>
				<td><i>Empfänger ID:</i> ${hex(receiver.rfid?c)}</td>
<#else>
				<td colspan="3"><i>gebunden:</i> ${receiver.bound?string("ja","nein")}</td>
</#if>
			</tr>
<#if receiver.bound>
<#list receiver.channelMapping as mapping>
			<tr>
				<td>&nbsp;</td>
				<td align="right"><#if mapping.outputChannel == 0><i>Empfängerausgang</i><#else>&nbsp;</#if></td>
				<td colspan="2">${mapping.inputChannel+1} => ${mapping.outputChannel+1}</td>
			</tr>
</#list>
</#if>
</#list>
</#if>			
			<tr>
				<th align="right">DSC-Ausgang</th>
				<td colspan="3">${model.dscOutputType}</td>
			</tr>
<#if helicopterModel??>
			<tr>
				<th align="right">Autorotation</th>
				<td colspan="3"><@switch model.getSwitch("AutoRotation")/></td>
			</tr>	
			<tr>
				<th align="right">Autorotation K1 Position</th>
				<td><i>Position:</i> ${helicopterModel.autorotationC1TriggerPosition}</td>
				<td colspan="2"><i>Schalter:</i> <@switch model.getSwitch("AutoRotationC1")/></td>
			</tr>
</#if>
			<tr>
				<th align="right" valign="top">Motor-Stopp</th>
				<td><i>Position:</i> ${model.throttleSettings.throttleCutOf.position}%</td>
				<td><i>Limit:</i> ${model.throttleSettings.throttleCutOf.threshold}%</td>
				<td><i>Schalter:</i> <@switch model.throttleSettings.throttleCutOf.switch/></td>							
			</tr>
<#if helicopterModel??>
			<tr>
				<th align="right">Markierung</th>
				<td colspan="3"><@switch model.getSwitch("MarkerKey")/></td>
			</tr>
</#if>
			<tr>
				<th align="right">Einschaltwarnung</th>
				<td colspan="3"><@switch model.getSwitch("PowerWarning")/></td>
			</tr>
			<tr>
				<th align="right">Auto Trimm</th>
				<td colspan="3"><@switch model.getSwitch("AutoTrim")/></td>
			</tr>
			<tr>
				<th align="right">Auto rücksetzen Uhr</th>
				<td colspan="3">${model.autoTimerReset?string("ja","nein")}</td>
			</tr>
		</table>

		<hr/>
		
<#if helicopterModel??>
		<h1>Helicoptertyp</h1>
		<table>
			<tr>
				<th align="right">Taumelscheibe</th>
				<td>${helicopterModel.swashplateType}</td>
			</tr>
			<tr>
				<th align="right">Taumelscheibenlinearisierung</th>
				<td>${helicopterModel.swashplateLinearization?string("ja","nein")}</td>
			</tr>							
			<tr>
				<th align="right">Rotor Drehrichtung</th>
				<td>${helicopterModel.rotorDirection}</td>
			</tr>
			<tr>
				<th align="right">Pitch Minimum</th>
				<td>${helicopterModel.pitchMin}</td>
			</tr>
			<tr>
				<th align="right">Expo Gaslimit</th>
				<td>${helicopterModel.expoThrottleLimit}</td>
			</tr>
			<tr>
				<th align="right">Gaslimit Warnung</th>
				<td>${helicopterModel.throttleLimitWarning}</td>
			</tr>
		</table>
</#if>
<#if wingedModel??>
		<h1>Modelltyp</h1>
		<table>
			<tr>
				<th align="right">Motor an K1</th>
				<td colspan="2">${wingedModel.motorOnC1Type}</td>
			</tr>
			<tr>
				<th align="right">Leitwerk</th>
				<td colspan="2">${wingedModel.tailType}</td>
			</tr>
			<tr>
				<th align="right">Querruder/Wölbklappen</th>
				<td colspan="2">${wingedModel.aileronFlapType}</td>
			</tr>
			<tr>
				<th align="right">Bremse</th>
				<td><i>Offset:</i> ${wingedModel.brakeOffset}</td>
				<td><i>Eingang:</i> ${wingedModel.brakeInputChannel.number?number+1}</td>
			</tr>
		</table>
</#if>

		<hr/>
		
		<h1>Servoeinstellungen</h1>
		<table>
			<tr>
				<th>Servo</th>
				<th>Umkehr</th>
				<th>Mitte</th>
				<th>Weg -</th>
				<th>Weg +</th>
				<th>Begrenzung -</th>
				<th>Begrenzung +</th>
			</tr>
<#list model.channel as channel>
<#if !channel.virtual>						
			<tr>
				<td align="center">S${channel.number?number+1}</td>
				<td align="center"><#if channel.reverse>&lt;=<#else>=&gt;</#if></td>
				<td align="center">${channel.center}%</td>
				<td align="center">${channel.travelLow}%</td>
				<td align="center">${channel.travelHigh}%</td>
				<td align="center">${channel.limitLow}%</td>
				<td align="center">${channel.limitHigh}%</td>
			</tr>
</#if>
</#list>
		</table>

		<hr/>
		
		<h1>Knüppeleinstellungen</h1>
		<table>
			<tr>
				<th>Kanal</th>
				<th>Trimm</th>
				<th>Trimmschritte</th>
				<th>Zeit -</th>
				<th>Zeit +</th>
			</tr>
<#if wingedModel??>
			<tr>
				<td>Kanal 1</td>
				<td>${model.stickTrim[0].mode}</td>
				<td align="center">${model.stickTrim[0].increment}</td>
				<td align="center">${model.stickTrim[0].timeLow?string("0.0")}s</td>
				<td align="center">${model.stickTrim[0].timeHigh?string("0.0")}s</td>
			</tr>
			<tr>
				<td>Querruder</td>
				<td>${model.stickTrim[1].mode}</td>
				<td align="center">${model.stickTrim[1].increment}</td>
				<td align="center">${model.stickTrim[1].timeLow?string("0.0")}s</td>
				<td align="center">${model.stickTrim[1].timeHigh?string("0.0")}s</td>
			</tr>
			<tr>
				<td>Höhenruder</td>
				<td>${model.stickTrim[2].mode}</td>
				<td align="center">${model.stickTrim[2].increment}</td>
				<td align="center">${model.stickTrim[2].timeLow?string("0.0")}s</td>
				<td align="center">${model.stickTrim[2].timeHigh?string("0.0")}s</td>
			</tr>
			<tr>
				<td>Seitenruder</td>
				<td>${model.stickTrim[3].mode}</td>
				<td align="center">${model.stickTrim[3].increment}</td>
				<td align="center">${model.stickTrim[3].timeLow?string("0.0")}s</td>
				<td align="center">${model.stickTrim[3].timeHigh?string("0.0")}s</td>
			</tr>
</#if>
<#if helicopterModel??>
			<tr>
				<td>Pitch/Gas</td>
				<td>${model.stickTrim[0].mode}</td>
				<td align="center">${model.stickTrim[0].increment}</td>
				<td align="center">${model.stickTrim[0].timeLow}</td>
				<td align="center">${model.stickTrim[0].timeHigh}</td>
			</tr>
			<tr>
				<td>Roll</td>
				<td>${model.stickTrim[1].mode}</td>
				<td align="center">${model.stickTrim[1].increment}</td>
				<td align="center">${model.stickTrim[1].timeLow}</td>
				<td align="center">${model.stickTrim[1].timeHigh}</td>
			</tr>
			<tr>
				<td>Nick</td>
				<td>${model.stickTrim[2].mode}</td>
				<td align="center">${model.stickTrim[2].increment}</td>
				<td align="center">${model.stickTrim[2].timeLow}</td>
				<td align="center">${model.stickTrim[2].timeHigh}</td>
			</tr>
			<tr>
				<td>Heckrotor</td>
				<td>${model.stickTrim[3].mode}</td>
				<td align="center">${model.stickTrim[3].increment}</td>
				<td align="center">${model.stickTrim[3].timeLow?string("0.0")}</td>
				<td align="center">${model.stickTrim[3].timeHigh?string("0.0")}</td>
			</tr>
</#if>			
		</table>

		<hr/>
		
		<h1>Gebereinstellungen</h1>

<#list model.phase as phase>
<#if phase.phaseType.name() != "Unused">
		<h2>Phase ${phase.number?number+1}: ${phase.phaseName}</h2>
		
		<table>
			<tr>
				<th>Eingang</th>
				<th>Typ</th>
				<th colspan="2">Geber</th>
				<th>Offset</th>
				<th>Weg -</th>
				<th>Weg +</th>
				<th>Zeit -</th>
				<th>Zeit +</th>
			</tr>
<#list phase.control as control>
			<tr>
				<td align="center">E${control.number?number+1}</td>
				<td align="center">${control.mode}</td>
<#if control.controlSwitch?? && control.controlSwitch.assignment.name() != "Unassigned">				
				<td align="center" colspan="2"><@switch control.controlSwitch/></td>
<#else>
<#if control.toggleLowSwitch?? && control.toggleLowSwitch.assignment.name() != "Unassigned" || control.toggleHighSwitch?? && control.toggleHighSwitch.assignment.name() != "Unassigned">
				<td><@switch control.toggleLowSwitch/></td>
				<td><@switch control.toggleHighSwitch/></td>
<#else>
				<td>fr</td>
				<td>---</td>
</#if>
</#if>
				<td align="center">${control.offset}%</td>
				<td align="center">${control.travelLow}%</td>
				<td align="center">${control.travelHigh}%</td>
				<td align="center">${control.timeLow?string("0.0")}s</td>
				<td align="center">${control.timeHigh?string("0.0")}s</td>
			</tr>
</#list>
		</table>
</#if>
</#list>

		<hr/>	

		<h1>DualRate Expo</h1>		
<#list model.phase as phase>
<#if phase.phaseType.name() != "Unused">
		<h2>Phase ${phase.number}: ${phase.phaseName}</h2>
		<table>
			<tr>
				<td>&nbsp;</td>
				<th colspan="3">Dual Rate</th>
				<th colspan="3">Expo</th>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<th>Schalter</th>
				<th>Wert</th>
				<th>Schalter</th>
				<th>Wert</th>
			</tr>
<#list [0,1,2] as i>
			<tr>			  	
				<th align="right">${phase.dualRate[i].function}</th>
				<td align="center"><@switch phase.dualRate[i].switch/></td>
<#if phase.dualRate[i].switch.assignment != "Unassigned">
				<td align="center">${phase.dualRate[i].values[0]}% / ${phase.dualRate[i].values[1]}%</td>
<#else>
				<td align="center">${phase.dualRate[i].values[0]}%</td>
</#if>
				<td align="center"><@switch phase.expo[i].switch/></td>
<#if phase.expo[i].switch.assignment != "Unassigned">
				<td align="center">${phase.expo[i].values[0]}% / ${phase.expo[i].values[1]}%</td>
<#else>
				<td align="center">${phase.expo[i].values[0]}%</td>
</#if>
			</tr>
</#list>
		</table>
</#if>
</#list>

		<hr/>	

		<h1>Kanal 1 Kurve</h1>
		
<#list model.phase as phase>
<#if phase.phaseType.name() != "Unused">
		<h2>Phase ${phase.number}: ${phase.phaseName}</h2>
		<table>
			<tr>
				<th>Kurve</th>
				<td colspan="2">${phase.channel1Curve.smoothing?string("an","aus")}</td>
			</tr>
			<tr>
				<th>Nummer</th>
				<th>Position</th>
				<th>Wert</th>
			</tr>
<#list phase.channel1Curve.point as point>
			<tr>
				<td align="center">${point.number+1}</td>
<#if point.enabled>
				<td align="center">${point.position}%</td>
				<td align="center">${point.value}%</td>
<#else>
				<td colspan="2" align="center">aus</td>
</#if>
			</tr>
</#list>
		</table>
</#if>
</#list>

		<hr/>
		
		<h1>Geberschalter</h1>
		
		<table>
			<tr>
				<th>Nummer</th>
				<th>Geber</th>
				<th>Position</th>
				<th>Richtung</th>
				<th>Schalter</th>
			</tr>
<#list model.controlSwitch as sw>
			<tr>
				<th>G${sw_index+1}</th>
				<td align="center">${sw.assignment}</td>
				<td align="center">${sw.position}</td>
				<td align="center"><#if sw.direction==0>=&gt;<#else>&lt;=</#if></td>
				<td align="center"><@switch sw.combineSwitch/></td>
			</tr>
</#list>
		</table>
		
		<hr/>
		
		<h1>logische Schalter</h1>

		<table>
			<tr>
				<th>Nummer</th>
				<th>Schalter 1</th>
				<th>Funktion</th>
				<th>Schalter 2</th>
			</tr>
<#list model.logicalSwitch as sw>
			<tr>
				<th>L${sw_index+1}</th>
				<td align="center"><@switch sw.switch[0]/></td>
				<td align="center">${sw.mode}</td>
				<td align="center"><@switch sw.switch[1]/></td>
			</tr>
</#list>
		</table>
		
		<hr/>
		
		<h1>Phaseneinstellungen</h1>
		
		<table>
			<tr>
				<th>Phase</th>
				<th>Name</th>
				<th>Uhr</th>
				<th>Motor</th>
				<th>Umschaltzeit</th>
			</tr>
<#list model.phase as phase>
<#if phase.phaseType.name() != "Unused">
			<tr>
				<td aling="center">Phase ${phase.number?number+1}</td>
				<td aling="center">${phase.phaseName}</td>
<#if phase.phaseTimer??>				
				<td aling="center">${phase.phaseTimer.mode}</td>
<#else>
				<td aling="center">---</td>
</#if>
				<td aling="center">${phase.motorOn?string("ja","nein")}</td>
				<td aling="center">${phase.phaseSwitchTime?string("0.0")}s</td>
			</tr>
</#if>
</#list>			
		</table>
		
		<hr/>
		
		<h1>Phasenzuweisung</h1>
		
		<table>
			<tr>
				<th align="right">Prioritätsschalter A</th>
				<td><@switch model.phaseAssignment.priorityASwitch/></td>
				<td><i>Phase:</i> ${model.phaseAssignment.assignment[1].number?number+1}:${model.phaseAssignment.assignment[1].phaseName}</td>
			</tr>
			<tr>
				<th align="right">Prioritätsschalter B</th>
				<td><@switch model.phaseAssignment.priorityBSwitch/></td>
				<td><i>Phase:</i> ${model.phaseAssignment.assignment[2].number?number+1}:${model.phaseAssignment.assignment[2].phaseName}</td>
			</tr>
			<tr>
				<th align="right">Kombinationsschalter C</th>
				<td><@switch model.phaseAssignment.combiCSwitch/></td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<th align="right">Kombinationsschalter D</th>
				<td><@switch model.phaseAssignment.combiDSwitch/></td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<th align="right">Kombinationsschalter E</th>
				<td><@switch model.phaseAssignment.comiESwitch/></td>
				<td>&nbsp;</td>				
			</tr>
			<tr>
				<th align="right">Kombinationsschalter F</th>
				<td><@switch model.phaseAssignment.combiFSwitch/></td>
				<td>&nbsp;</td>
			</tr>
		</table>
		<h2>Kombinationsphasenzuweisungen</h2>
		<table>
			<tr>
				<th>C</th>
				<th>D</th>
				<th>E</th>
				<th>F</th>
				<th>Phase</th>
			</tr>
<#list model.phaseAssignment.assignment as assignment>
<#if (assignment_index > 1)>
			<tr>
				<td alling="center">${((assignment_index-2)/8%2==1)?string("an","aus")}</td>
				<td alling="center">${((assignment_index-2)/4%2==1)?string("an","aus")}</td>
				<td alling="center">${((assignment_index-2)/2%2==1)?string("an","aus")}</td>
				<td alling="center">${((assignment_index-2)%2==1)?string("an","aus")}</td>
<#if (assignment_index == 2)>
				<td>${model.phaseAssignment.assignment[0].number?number+1}:${model.phaseAssignment.assignment[0].phaseName}</td>
<#else>
				<td>${assignment.number?number+1}:${assignment.phaseName}</td>
</#if>
			</tr>
</#if>
</#list>
		</table>
		
		<hr/>
		
		<table>
			<tr>
				<th align="right">Gastrimm</th>
				<td colspan="3">${model.throttleSettings.throttleTrim}%</td>
			</tr>
			<tr>
				<th align="right">letzte Leerlaufposition</th>
				<td colspan="3">${model.throttleSettings.throttleLastIdlePosition}%</td>
			</tr>			
			<tr>
				<th align="right" valign="top">Uhren</th>
				<td colspan="3">
					<table callpadding="0">
						<tr>
							<th>Typ</th>
							<th>Wert</th>
							<th>Schalter</th>
						</tr>
<#list model.clock as clock>
						<tr>
							<td>${clock.mode!""}${clock.type!""}</td>
							<td>${clock.minutes}:${clock.seconds?string("00")}</td>
							<td><@switch clock.switch/></td>
						</tr>
</#list>
					</table>
				</td>
			</tr>
<#list model.phase as phase>
<#if phase.phaseName != "Global" && phase.phaseType.name() != "Unused">
			<tr>
				<th align="right" valign="top">Phase ${phase.number}</th>
				<td><i>Name:</i> ${phase.phaseName}</td>
				<td colspan="2"><i>Schalter:</i> <@switch phase.switch/></td>
			</tr>
</#if>
</#list>
			<tr>
				<th align="right" valign="top">Empfängerausgang</th>
				<td colspan="3">
					<table cellpadding="0">
<#list model.channelMapping as mapping>
						<tr>
							<td align="center">S${mapping.inputChannel+1}</td>
							<td align="center">=></td>
							<td align="center">Ausgang ${mapping.outputChannel+1}</td>
						</tr>
</#list>					
					</table>
				</td>
			</tr>
			<tr>
				<th align="right">Empfänger gebunden</th>
				<td colspan="3">${model.bound?string("ja","nein")}</td>
			</tr>			
			<tr>
				<th align="right">Empfänger ID</th>
				<td colspan="3">${hex(model.receiver[0].rfid?c)}</td>
			</tr>
		</table>

		<hr/>




<#if wingedModel??>
		<h1>Phasentrimm</h1>
		<table>
			<tr>
				<th align="right">Phase</th>
				<th>WK</th>
				<th>QR</th>
				<th>HR</th>
			</tr>
<#list wingedModel.phase as phase>				
<#if phase.phaseName != "Global" && phase.phaseType.name() != "Unused">
			<tr>
				<th align="right">${phase.phaseName}</th>
				<td>${phase.wingTrim.flapPhaseTrim[0]}%</td>
				<td>${phase.wingTrim.aileronPhaseTrim[0]}%</td>
				<td>${phase.wingTrim.elevatorPhaseTrim}%</td>
			</tr>
</#if>
</#list>
		</table>

		<hr/>

		<h1>Flächenmix</h1>
		<table>
			<tr>
				<th align="right">Mischer</th>
				<th align="center">Wert</th>
				<th align="left">Schalter</th>
			</tr>
<#list wingedModel.phase[0].wingMixer as mixer>
			<tr>
				<th align="right">${mixer.id}</th>
				<td align="center">${mixer.value[0]}%</td>
				<td><@switch mixer.switch/></td>						
			</tr>
</#list>						
		</table>
</#if>
<#if helicopterModel??>
		<h1>Helimix</h1>		
<#list helicopterModel.phase as phase>
<#if phase.phaseName != "Global" && phase.phaseType.name() != "Unused">
		<h2>Phase ${phase.number}: ${phase.phaseName}</h2>
		
		<table>
			<@curve "Pitchkurve" phase.helicopterMixer.pitchCurve.point/>
			<@curve "Gaskurve (K1 -> Gas)" phase.helicopterMixer.throttleCurve.point/>
			<@curve "Heckrotorkurve (K1 -> Heck)" phase.helicopterMixer.tailCurve.point/>
			<tr>
				<th align="right">Gyro</th>
				<td>${phase.gyroGain}%</td>
			</tr>
			<tr>
				<th align="right">Eingang 8</th>
				<td>${phase.channel8Value}%</td>
			</tr>
			<tr>
				<th align="right">Taumelscheibenlimit</th>
				<td><#if phase.helicopterMixer.swashplateLimit == 150>aus<#else>${phase.helicopterMixer.swashplateLimit}%</#if></td>
			</tr>
		</table>	
</#if>
</#list>
</#if>

		<hr/>
		
		<h1>Freie Mixer</h1>
		<table>
			<tr>
				<th>Mixer</th>
				<th>Input</th>
				<th>von</th>
				<th>zu</th>
				<th>Schalter</th>
				<th>Weg -</th>
				<th>Weg +</th>
				<th>Offset</th>
			</tr>
		
<#list model.freeMixer as mixer>
			<tr>
				<td>M${mixer.number?number+1}</td>
				<td>${mixer.inputType}</td>
				<td><#if mixer.fromChannel.number?number == 9>S<#else>${mixer.fromChannel.number}</#if></td>
				<td>${mixer.toChannel.number}</td>
				<td><@switch mixer.switch/></td>
<#if mixer.type.name() == "Curve">
				<td colspan="3" align="center"><i>Kurve</i></td>
<#else>
				<td>${mixer.travelLow}%</td>
				<td>${mixer.travelHigh}%</td>
				<td>${mixer.offset}%</td>
</#if>
			</tr>
</#list>
		</table>

		<hr/>

<#if helicopterModel??>
		<h1>Taumelscheibenmischer</h1>
		<table>
			<tr>
				<th>Pitch</th>
				<td>${helicopterModel.swashplateMix.pitchMix}</td>
			</tr>
			<tr>
				<th>Roll</th>
				<td>${helicopterModel.swashplateMix.rollMix}</td>
			</tr>
			<tr>
				<th>Nick</th>
				<td>${helicopterModel.swashplateMix.nickMix}</td>
			</tr>
		</table>
		
		<hr/>			

</#if>		
		<h1>Fail Safe</h1>		
		<table>
			<tr>
				<th align="right">Verzögerung</th>
				<td>${model.failSafeDelay}s</td>
			</tr>
			<tr>
				<th align="right">FlailSafe Prüfung</th>
				<td>${model.failSafeSettingCheck?string("ja", "nein")}</td>
			</tr>
		</table>
		<table>
			<tr>
				<td>&nbsp;</td>
<#list model.channel as channel>
<#if !channel.virtual>
				<th align="center">S${channel.number?number+1}</th>
</#if>
</#list>
			</tr>
			<tr>
				<th>Mode</th>
<#list model.channel as channel>
<#if !channel.virtual>
				<td align="center">${channel.failSafeMode}</td>
</#if>
</#list>
			</tr>
			<tr>
				<th>Position</th>
<#list model.channel as channel>
<#if !channel.virtual>
<#if channel.failSafeMode.name() == "Position">
				<td align="center">${channel.failSafePosition}%</td>
<#else>
				<td>---</td>
</#if>
</#if>
</#list>
			</tr>
		</table>
		
		<hr/>
		
		<h1>Telemetrie</h1>
		<table>
			<tr>
				<th align="right">Ansage wiederholen</th>
				<td>${model.telemetry.voiceDelay}s <i>Schalter:</i> <@switch model.telemetry.VoiceRepeat/></td>
			</tr>
			<tr>
				<th align="right">nächste Ansage</th>
				<td><@switch model.telemetry.VoiceTrigger/></td>
			</tr>
			<tr>
				<th align="right">Varioton</th>
				<td><@switch model.telemetry.VarioTone/></td>
			</tr>
			<tr>
				<th align="right">ausgewählte Sensoren</th>
				<td><#list model.telemetry.selectedSensor as sensor>${sensor} </#list></td>
			</tr>
			<tr>
				<th align="right">aktueller Sensor</th>
				<td>${model.telemetry.currentSensor}</td>
			</tr>
			<tr>
				<th align="right">aktuelle Sensorseite</th>
				<td>${model.telemetry.currentSensorPage}</td>
			</tr>
		</table>
		
		<hr/>
		
		<h1>Lehrer/Schüler</h1>		
		<table>
			<tr>
				<th align="right">Kabellos</th>
				<td>${model.trainerConfig.wireless?string("ja", "nein")}</td>
			</tr>
			<tr>
				<th align="right">Lehrer ID</th>
				<td>${hex(model.trainerConfig.trainerId?c)}</td>
			</tr>
			<tr>
				<th align="right">Schüler ID</th>
				<td>${hex(model.trainerConfig.pupilId?c)}</td>
			</tr>
			<tr>
				<th align="right">Schalter</th>
				<td><@switch model.trainerConfig.trainerswitch/></td>
			</tr>
		</table>
		<table>
			<tr>
				<td>&nbsp;</td>
<#list model.channel as channel>
<#if !channel.virtual>
				<th>S${channel.number?number+1}</th>
</#if>
</#list>
			</tr>
			<tr>
				<th>Mode</th>
<#list model.channel as channel>
<#if !channel.virtual>
				<td align="center">${channel.trainerMode}</td>
</#if>
</#list>
			</tr>
		</table>		
		
		<hr/>
		
		<h1>Schalter-/Geberzuordnungen</h1>
		<table>
			<tr>
				<th align="right">Funktion</th>
				<th>Schalter/Geber</th>
				<th align="left">Typ</th>
			</tr>
<#list model.switch as sw>
<#if (sw.assignment!"Null") != "Unassigned">
			<tr>
				<td align="right">${sw.id}</td>
				<td align="center"><@switch sw/></td>
				<td>${sw.type}</td>
			</tr>
</#if>
</#list>
		</table>
	</body>
</@htmlsafe>
</html>